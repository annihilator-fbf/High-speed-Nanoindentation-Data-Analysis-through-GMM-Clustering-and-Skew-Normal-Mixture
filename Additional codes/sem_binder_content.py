# -*- coding: utf-8 -*-
"""SEM binder content

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BP-QcB0TyicVlJymPMBPa6EDeEl62VKF
"""

#Write the dimensions (in microns) of your nanoindentation map
X_MapDimension= 100
Y_MapDimension = 100

image= '/image_path.tif'

import matplotlib.pyplot as plt

# Load SEM image
sem_img = plt.imread(image)

# Get dimensions of SEM image in pixels
height, width, channels = sem_img.shape

print(f"SEM image dimensions: {width} x {height} pixels")

import cv2
import numpy as np
import matplotlib.pyplot as plt
img = cv2.imread(image)

# Convert the image to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply a threshold to the grayscale image
thresh_value = 90 # adjust this value to set the threshold
thresh, binary = cv2.threshold(gray, thresh_value, 255, cv2.THRESH_BINARY)

# Count the number of pixels in the darker phase and calculate %
dark_pixels = np.count_nonzero(binary == 0)
total_pixels = binary.shape[0] * binary.shape[1]
dark_percentage = (dark_pixels / total_pixels) * 100

print(f"The volume percentage of the binder is: {dark_percentage:.2f}%")

# Display the original image and the thresholded image side by side
fig, ax = plt.subplots(1, 2, figsize=(10, 5))
ax[0].imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
ax[0].set_title('Original Image')
ax[1].imshow(binary, cmap='gray')
ax[1].set_title('Thresholded Image')
plt.show()